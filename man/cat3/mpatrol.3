


MPATROL(3)               mpatrol library               MPATROL(3)


NNAAMMEE
       mpatrol - dynamic memory allocation and tracing library

SSYYNNOOPPSSIISS
       #include <mpatrol.h>

       void *malloc(size_t size);
       void *calloc(size_t nelem, size_t size);
       void *memalign(size_t align, size_t size);
       void *valloc(size_t size);
       void *pvalloc(size_t size);
       char *strdup(char *str);
       char *strndup(char *str, size_t size);
       char *strsave(char *str);
       char *strnsave(char *str, size_t size);
       void *realloc(void *ptr, size_t size);
       void *recalloc(void *ptr, size_t size);
       void *expand(void *ptr, size_t size);
       void free(void *ptr);
       void cfree(void *ptr);

       void *operator new(size_t size);
       void *operator new[](size_t size);
       void operator delete(void *ptr);
       void operator delete[](void *ptr);
       void (*set_new_handler(void (*func)(void)))(void);

       void *memset(void *ptr, int byte, size_t size);
       void bzero(void *ptr, size_t size);
       void *memcpy(void *dest, void *src, size_t size);
       void *memmove(void *dest, void *src, size_t size);
       void bcopy(void *src, void *dest, size_t size);
       int memcmp(void *ptr1, void *ptr2, size_t size);
       int bcmp(void *ptr1, void *ptr2, size_t size);

       int __mp_info(void *ptr, __mp_allocinfo *info);
       void __mp_memorymap(int stats);
       void __mp_summary(void);
       void __mp_check(void);
       void (*__mp_prologue(void (*func)(void *, size_t)))
            (void *, size_t);
       void (*__mp_epilogue(void (*func)(void *)))(void *);
       void (*__mp_nomemory(void (*func)(void)))(void);

DDEESSCCRRIIPPTTIIOONN
       The  _m_p_a_t_r_o_l  _l_i_b_r_a_r_y  contains implementations of dynamic
       memory allocation functions for C  and  C++  suitable  for
       tracing  and debugging, and is available on UNIX, AmigaOS,
       Windows and Netware platforms.  The library is intended to
       be  used  without  requiring  any changes to existing user
       source code except the inclusion of the  _m_p_a_t_r_o_l_._h  header
       file, although additional functions are supplied for extra
       tracing and control.  Note that the current version of the
       mpatrol   library  is  contained  in  the  MMPPAATTRROOLL__VVEERRSSIIOONN



Release 1.1              28 January 2000                        1





MPATROL(3)               mpatrol library               MPATROL(3)


       preprocessor macro.

       All diagnostics are sent to the file  _m_p_a_t_r_o_l_._l_o_g  in  the
       current  directory  by  default but this can be changed at
       run-time.  Additional configuration options  can  also  be
       changed  at  run-time  by  setting  and  altering the MMPPAA--
       TTRROOLL__OOPPTTIIOONNSS environment variable.  See EENNVVIIRROONNMMEENNTT  below
       for more details.

       Details  of  memory allocations and free memory are stored
       internally as a tree structure for speed and also to allow
       the  best  fit allocation algorithm to be used.  This also
       enables the library to  perform  intelligent  resizing  of
       memory allocations and can be used to quickly determine if
       an address has been allocated on the heap.

       On systems that support  memory  protection,  the  library
       attempts to detect any illegal memory accesses and display
       as much information as it can obtain about the address  in
       question and where the illegal memory access occurred.

       Stack traceback information for every memory allocation is
       available on some supported platforms, which is useful for
       determining  exactly  where  a  memory allocation was per-
       formed or for adding meaning to tracing.  Symbol names are
       read  from  the executable file and also possibly from any
       required shared libraries.

       The following 14 functions are available  as  replacements
       for  existing  C library functions.  To use these you must
       include _m_p_a_t_r_o_l_._h before all other header files,  although
       on  UNIX  platforms  they will be used anyway, albeit with
       slightly less tracing information:

       mmaalllloocc Allocates _s_i_z_e uninitialized bytes  from  the  heap
              and  returns  a  pointer  to  the first byte of the
              allocation.  The pointer returned will be  suitably
              aligned  for casting to any type and can be used to
              store data of up to _s_i_z_e bytes in length.  If  _s_i_z_e
              is  _0  then the memory allocated will be implicitly
              rounded up to _1 byte.  If there is not enough space
              in  the heap then the null pointer will be returned
              and eerrrrnnoo will be set  to  EENNOOMMEEMM.   The  allocated
              memory must be deallocated with ffrreeee or reallocated
              with rreeaalllloocc.

       ccaalllloocc Allocates _n_e_l_e_m elements of  _s_i_z_e  zero-initialized
              bytes  from  the  heap and returns a pointer to the
              first byte of the allocation.  The pointer returned
              will  be  suitably  aligned for casting to any type
              and can be used to store data of up to _n_e_l_e_m _* _s_i_z_e
              bytes  in  length.   If  _n_e_l_e_m _* _s_i_z_e is _0 then the
              amount  of  memory  allocated  will  be  implicitly
              rounded up to _1 byte.  If there is not enough space



Release 1.1              28 January 2000                        2





MPATROL(3)               mpatrol library               MPATROL(3)


              in the heap then the null pointer will be  returned
              and  eerrrrnnoo  will  be  set to EENNOOMMEEMM.  The allocated
              memory must be deallocated with ffrreeee or reallocated
              with rreeaalllloocc.

       mmeemmaalliiggnn
              Allocates  _s_i_z_e  uninitialized  bytes from the heap
              and returns a pointer to  the  first  byte  of  the
              allocation.   The  pointer returned will be aligned
              to _a_l_i_g_n bytes and can be used to store data of  up
              to _s_i_z_e bytes in length.  If _a_l_i_g_n is zero then the
              default system alignment will be used.  If _a_l_i_g_n is
              not  a  power  of two then it will be rounded up to
              the nearest power of two.  If _a_l_i_g_n is greater than
              the  system  page size then it will be truncated to
              that value.  If _s_i_z_e is _0 then the memory allocated
              will  be implicitly rounded up to _1 byte.  If there
              is not enough space  in  the  heap  then  the  null
              pointer  will  be returned and eerrrrnnoo will be set to
              EENNOOMMEEMM.  The allocated memory must  be  deallocated
              with ffrreeee or reallocated with rreeaalllloocc, although the
              latter  will  not  guarantee  the  preservation  of
              alignment.

       vvaalllloocc Allocates  _s_i_z_e  uninitialized  bytes from the heap
              and returns a pointer to  the  first  byte  of  the
              allocation.   The  pointer returned will be aligned
              to the system page size and can be  used  to  store
              data  of  up to _s_i_z_e bytes in length.  If _s_i_z_e is _0
              then  the  memory  allocated  will  be   implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then the null pointer will be  returned
              and  eerrrrnnoo  will  be  set to EENNOOMMEEMM.  The allocated
              memory must be deallocated with ffrreeee or reallocated
              with  rreeaalllloocc, although the latter will not guaran-
              tee the preservation of alignment.

       ppvvaalllloocc
              Allocates _s_i_z_e uninitialized bytes  from  the  heap
              and  returns  a  pointer  to  the first byte of the
              allocation.  The pointer returned will  be  aligned
              to  the  system  page size and can be used to store
              data of up to _s_i_z_e bytes in length.  If _s_i_z_e  is  _0
              then   the  memory  allocated  will  be  implicitly
              rounded up  to  _1  page,  otherwise  _s_i_z_e  will  be
              implicitly  rounded  up to a multiple of the system
              page size.  If there is not  enough  space  in  the
              heap  then  the  null  pointer will be returned and
              eerrrrnnoo will be set to EENNOOMMEEMM.  The allocated  memory
              must  be  deallocated with ffrreeee or reallocated with
              rreeaalllloocc, although the latter will not guarantee the
              preservation of alignment.

       ssttrrdduupp Allocates  exactly  enough  memory from the heap to



Release 1.1              28 January 2000                        3





MPATROL(3)               mpatrol library               MPATROL(3)


              duplicate _s_t_r (including the terminating nul  char-
              acter)  and  returns a pointer to the first byte of
              the allocation after copying _s_t_r to the newly-allo-
              cated  memory.   The  pointer returned will have no
              alignment constraints and  can  be  used  to  store
              character  data up to the length of _s_t_r.  If _s_t_r is
              NNUULLLL then the null pointer will  be  returned.   If
              there is not enough space in the heap then the null
              pointer will be returned and eerrrrnnoo will be  set  to
              EENNOOMMEEMM.   The  allocated memory must be deallocated
              with ffrreeee or reallocated with rreeaalllloocc.

       ssttrrnndduupp
              Allocates exactly enough memory from  the  heap  to
              duplicate  _s_t_r (including the terminating nul char-
              acter) and returns a pointer to the first  byte  of
              the allocation after copying _s_t_r to the newly-allo-
              cated memory.  The pointer returned  will  have  no
              alignment  constraints  and  can  be  used to store
              character data up to the length of _s_t_r.  If _s_t_r  is
              NNUULLLL  then  the  null pointer will be returned.  If
              the length of _s_t_r is greater than  _s_i_z_e  then  only
              _s_i_z_e  characters will be allocated and copied, with
              one additional byte  for  the  nul  character.   If
              there is not enough space in the heap then the null
              pointer will be returned and eerrrrnnoo will be  set  to
              EENNOOMMEEMM.   The  allocated memory must be deallocated
              with ffrreeee or reallocated with rreeaalllloocc.  This  func-
              tion  is available for backwards compatibility with
              older C libraries and should not  be  used  in  new
              code.

       ssttrrssaavvee
              Allocates  exactly  enough  memory from the heap to
              duplicate _s_t_r (including the terminating nul  char-
              acter)  and  returns a pointer to the first byte of
              the allocation after copying _s_t_r to the newly-allo-
              cated  memory.   The  pointer returned will have no
              alignment constraints and  can  be  used  to  store
              character  data up to the length of _s_t_r.  If _s_t_r is
              NNUULLLL then the null pointer will  be  returned.   If
              there is not enough space in the heap then the null
              pointer will be returned and eerrrrnnoo will be  set  to
              EENNOOMMEEMM.   The  allocated memory must be deallocated
              with ffrreeee or reallocated with rreeaalllloocc.  This  func-
              tion  is available for backwards compatibility with
              older C libraries and should not  be  used  in  new
              code.

       ssttrrnnssaavvee
              Allocates  exactly  enough  memory from the heap to
              duplicate _s_t_r (including the terminating nul  char-
              acter)  and  returns a pointer to the first byte of
              the allocation after  copying  _s_t_r  to  the  newly-



Release 1.1              28 January 2000                        4





MPATROL(3)               mpatrol library               MPATROL(3)


              allocated  memory.   The pointer returned will have
              no alignment constraints and can be used  to  store
              character  data up to the length of _s_t_r.  If _s_t_r is
              NNUULLLL then the null pointer will  be  returned.   If
              the  length  of  _s_t_r is greater than _s_i_z_e then only
              _s_i_z_e characters will be allocated and copied,  with
              one  additional  byte  for  the  nul character.  If
              there is not enough space in the heap then the null
              pointer  will  be returned and eerrrrnnoo will be set to
              EENNOOMMEEMM.  The allocated memory must  be  deallocated
              with  ffrreeee or reallocated with rreeaalllloocc.  This func-
              tion is available for backwards compatibility  with
              older  C  libraries  and  should not be used in new
              code.

       rreeaalllloocc
              Resizes the memory allocation beginning at  _p_t_r  to
              _s_i_z_e  bytes and returns a pointer to the first byte
              of the new allocation  after  copying  _p_t_r  to  the
              newly-allocated  memory, which will be truncated if
              _s_i_z_e is smaller than the original allocation.   The
              pointer returned will be suitably aligned for cast-
              ing to any type and can be used to store data of up
              to  _s_i_z_e  bytes in length.  If _p_t_r is NNUULLLL then the
              call will be equivalent to mmaalllloocc.  If  _s_i_z_e  is  _0
              then  the  existing memory allocation will be freed
              and the null pointer will be returned.  If _s_i_z_e  is
              greater than the original allocation then the extra
              space will be filled with uninitialized bytes.   If
              there is not enough space in the heap then the null
              pointer will be returned and eerrrrnnoo will be  set  to
              EENNOOMMEEMM.   The  allocated memory must be deallocated
              with ffrreeee and can be reallocated again  with  rreeaall--
              lloocc.

       rreeccaalllloocc
              Resizes  the  memory allocation beginning at _p_t_r to
              _s_i_z_e bytes and returns a pointer to the first  byte
              of  the  new  allocation  after  copying _p_t_r to the
              newly-allocated memory, which will be truncated  if
              _s_i_z_e  is smaller than the original allocation.  The
              pointer returned will be suitably aligned for cast-
              ing to any type and can be used to store data of up
              to _s_i_z_e bytes in length.  If _p_t_r is NNUULLLL  then  the
              call  will  be  equivalent to ccaalllloocc.  If _s_i_z_e is _0
              then the existing memory allocation will  be  freed
              and  the null pointer will be returned.  If _s_i_z_e is
              greater than the original allocation then the extra
              space  will  be filled with zero-initialized bytes.
              If there is not enough space in the heap  then  the
              null pointer will be returned and eerrrrnnoo will be set
              to EENNOOMMEEMM.  The allocated memory  must  be  deallo-
              cated  with  ffrreeee and can be reallocated again with
              rreeaalllloocc.  This function is available for  backwards



Release 1.1              28 January 2000                        5





MPATROL(3)               mpatrol library               MPATROL(3)


              compatibility with older C libraries and ccaalllloocc and
              should not be used in new code.

       eexxppaanndd Attempts to resize the memory allocation  beginning
              at  _p_t_r  to  _s_i_z_e  bytes  and either returns _p_t_r if
              there was enough space to resize it, or NNUULLLL if the
              block could not be resized for a particular reason.
              If _p_t_r is NNUULLLL then the call will be equivalent  to
              mmaalllloocc.   If  _s_i_z_e  is  00  then the existing memory
              allocation will be freed and the NNUULLLL pointer  will
              be  returned.  If _s_i_z_e is greater than the original
              allocation then the extra space will be filled with
              uninitialized  bytes  and  if _s_i_z_e is less than the
              original allocation then the memory block  will  be
              truncated.   If  there  is  not enough space in the
              heap then the NNUULLLL pointer  will  be  returned  and
              eerrrrnnoo  will be set to EENNOOMMEEMM.  The allocated memory
              must be deallocated with ffrreeee and  can  be  reallo-
              cated  again with rreeaalllloocc.  This function is avail-
              able  for  backwards  compatibility  with  older  C
              libraries and should not be used in new code.

       ffrreeee   Frees the memory allocation beginning at _p_t_r so the
              memory can be reused by another  call  to  allocate
              memory.   If  _p_t_r  is  NNUULLLL  then no memory will be
              freed.   All  of  the  previous  contents  will  be
              destroyed.

       ccffrreeee  Frees the memory allocation beginning at _p_t_r so the
              memory can be reused by another  call  to  allocate
              memory.   If  _p_t_r  is  NNUULLLL  then no memory will be
              freed.   All  of  the  previous  contents  will  be
              destroyed.   This  function  is available for back-
              wards compatibility with older C libraries and ccaall--
              lloocc and should not be used in new code.

       The  following  5  functions are available as replacements
       for existing C++ library functions.  To use these you must
       include  _m_p_a_t_r_o_l_._h before all other header files, although
       on UNIX platforms they will be used  anyway,  albeit  with
       slightly less tracing information:

       ooppeerraattoorr nneeww
              Allocates  _s_i_z_e  uninitialized  bytes from the heap
              and returns a pointer to  the  first  byte  of  the
              allocation.   The pointer returned will be suitably
              aligned for casting to any type and can be used  to
              store  data of up to _s_i_z_e bytes in length.  If _s_i_z_e
              is _0 then the memory allocated will  be  implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then the null pointer will be  returned
              and  eerrrrnnoo  will  be  set to EENNOOMMEEMM - no exceptions
              will be thrown.  The allocated memory must be deal-
              located with ooppeerraattoorr ddeelleettee.



Release 1.1              28 January 2000                        6





MPATROL(3)               mpatrol library               MPATROL(3)


       ooppeerraattoorr nneeww[[]]
              Allocates  _s_i_z_e  uninitialized  bytes from the heap
              and returns a pointer to  the  first  byte  of  the
              allocation.   The pointer returned will be suitably
              aligned for casting to any type and can be used  to
              store  data of up to _s_i_z_e bytes in length.  If _s_i_z_e
              is _0 then the memory allocated will  be  implicitly
              rounded up to _1 byte.  If there is not enough space
              in the heap then the null pointer will be  returned
              and  eerrrrnnoo  will  be  set to EENNOOMMEEMM - no exceptions
              will be thrown.  The allocated memory must be deal-
              located with ooppeerraattoorr ddeelleettee[[]].

       ooppeerraattoorr ddeelleettee
              Frees the memory allocation beginning at _p_t_r so the
              memory can be reused by another  call  to  allocate
              memory.   If  _p_t_r  is  NNUULLLL  then no memory will be
              freed.   All  of  the  previous  contents  will  be
              destroyed.   This  function  must only be used with
              memory allocated by ooppeerraattoorr nneeww.

       ooppeerraattoorr ddeelleettee[[]]
              Frees the memory allocation beginning at _p_t_r so the
              memory  can  be  reused by another call to allocate
              memory.  If _p_t_r is NNUULLLL  then  no  memory  will  be
              freed.   All  of  the  previous  contents  will  be
              destroyed.  This function must only  be  used  with
              memory allocated by ooppeerraattoorr nneeww[[]].

       sseett__nneeww__hhaannddlleerr
              Installs  a low-memory handler specifically for use
              with ooppeerraattoorr nneeww and ooppeerraattoorr nneeww[[]] and returns  a
              pointer to the previously installed handler, or the
              null pointer if  no  handler  had  been  previously
              installed.   This will be called repeatedly by both
              functions when they would normally return NNUULLLL, and
              this  loop will continue until they manage to allo-
              cate the requested space.  Note that this  function
              is equivalent to ____mmpp__nnoommeemmoorryy and will replace the
              handler installed by that function.

       The following 7 functions are  available  as  replacements
       for existing C library memory operation functions.  To use
       these you must include _m_p_a_t_r_o_l_._h before all  other  header
       files,  although  on UNIX platforms they will be used any-
       way, albeit with slightly less tracing information:

       mmeemmsseett Writes _s_i_z_e bytes of value _b_y_t_e to the memory loca-
              tion  beginning at _p_t_r and returns _p_t_r.  If _s_i_z_e is
              00 then no bytes will be written.  If the  operation
              would  affect  an existing memory allocation in the
              heap but would straddle  that  allocation's  bound-
              aries  then  an  error message will be generated in
              the log file and no bytes will be written.



Release 1.1              28 January 2000                        7





MPATROL(3)               mpatrol library               MPATROL(3)


       bbzzeerroo  Writes _s_i_z_e  zero  bytes  to  the  memory  location
              beginning  at _p_t_r.  If _s_i_z_e is 00 then no bytes will
              be written.   If  the  operation  would  affect  an
              existing  memory  allocation  in the heap but would
              straddle that allocation's boundaries then an error
              message  will  be  generated in the log file and no
              bytes will be written.  This function is  available
              for  backwards compatibility with older C libraries
              and should not be used in new code.

       mmeemmccppyy Copies _s_i_z_e bytes from  _s_r_c  to  _d_e_s_t  and  returns
              _d_e_s_t.  If _s_i_z_e is 00 or _s_r_c is the same as _d_e_s_t then
              no bytes will be copied.  The source  and  destina-
              tion ranges should not overlap, otherwise a warning
              will be written to the log file.  If the  operation
              would  affect  an existing memory allocation in the
              heap but would straddle  that  allocation's  bound-
              aries  then  an  error message will be generated in
              the log file and no bytes will be copied.

       mmeemmmmoovvee
              Copies _s_i_z_e bytes from  _s_r_c  to  _d_e_s_t  and  returns
              _d_e_s_t.  If _s_i_z_e is 00 or _s_r_c is the same as _d_e_s_t then
              no bytes will be copied.  If  the  operation  would
              affect  an  existing  memory allocation in the heap
              but would  straddle  that  allocation's  boundaries
              then  an error message will be generated in the log
              file and no bytes will be copied.

       bbccooppyy  Copies _s_i_z_e bytes from _s_r_c to _d_e_s_t.  If _s_i_z_e  is  00
              or  _s_r_c  is  the same as _d_e_s_t then no bytes will be
              copied.  If the operation would affect an  existing
              memory  allocation  in  the heap but would straddle
              that allocation's boundaries then an error  message
              will be generated in the log file and no bytes will
              be copied.  This function is  available  for  back-
              wards  compatibility  with  older  C  libraries and
              should not be used in new code.

       mmeemmccmmpp Compares _s_i_z_e bytes from _p_t_r_1 and _p_t_r_2 and  returns
              00 if all of the bytes are identical, or returns the
              byte difference of the first differing  bytes.   If
              _s_i_z_e is 00 or _p_t_r_1 is the same as _p_t_r_2 then no bytes
              will be compared.  If the operation would read from
              an existing memory allocation in the heap but would
              straddle that allocation's boundaries then an error
              message  will  be  generated in the log file and no
              bytes will be compared.

       bbccmmpp   Compares _s_i_z_e bytes from _p_t_r_1 and _p_t_r_2 and  returns
              00 if all of the bytes are identical, or returns the
              byte difference of the first differing  bytes.   If
              _s_i_z_e is 00 or _p_t_r_1 is the same as _p_t_r_2 then no bytes
              will be compared.  If the operation would read from



Release 1.1              28 January 2000                        8





MPATROL(3)               mpatrol library               MPATROL(3)


              an existing memory allocation in the heap but would
              straddle that allocation's boundaries then an error
              message  will  be  generated in the log file and no
              bytes will be compared.  This function is available
              for  backwards compatibility with older C libraries
              and should not be used in new code.

       The following 7 functions are available  as  support  rou-
       tines  for  additional  control and tracing in the mpatrol
       library.  To use these you should  include  the  _m_p_a_t_r_o_l_._h
       header file:

       ____mmpp__iinnffoo
              Obtains information about a specific memory alloca-
              tion by placing statistics about _p_t_r in  _i_n_f_o.   If
              _p_t_r  does not belong to a previously allocated mem-
              ory allocation then _0 will be returned, otherwise _1
              will  be returned and _i_n_f_o will contain the follow-
              ing information:

              FFiieelldd   DDeessccrriippttiioonn

              bblloocckk   Pointer to first byte of alloc.
              ssiizzee    Size of alloc in bytes.
              ttyyppee    Type of function which allocated memory.
              aalllloocc   Allocation index.
              rreeaalllloocc Number of times reallocated.
              tthhrreeaadd  Thread identifier.
              ffuunncc    Function in which alloc took place.
              ffiillee    File in which alloc took place.
              lliinnee    Line number at which alloc took place.
              ssttaacckk   Pointer to function call stack.
              ffrreeeedd   Indicates if alloc has been freed.

       ____mmpp__mmeemmoorryymmaapp
              If _s_t_a_t_s is non-zero then the current statistics of
              the mpatrol library will be displayed.  If the heap
              contains at least  one  allocated,  freed  or  free
              block  then  a map of the current heap will also be
              displayed.

       ____mmpp__ssuummmmaarryy
              Displays information about the current state of the
              mpatrol  library,  including  its  settings and any
              relevant statistics.

       ____mmpp__cchheecckk
              Forces the library to perform an immediate check of
              the overflow buffers of every memory allocation and
              to ensure that nothing  has  overwritten  any  free
              blocks.

       ____mmpp__pprroolloogguuee
              Installs  a  prologue  function to be called before



Release 1.1              28 January 2000                        9





MPATROL(3)               mpatrol library               MPATROL(3)


              any memory allocation, reallocation or deallocation
              function.   This  function will return a pointer to
              the previously installed prologue function, or  the
              null  pointer if no prologue function had been pre-
              viously installed.  The following arguments will be
              used to call the prologue function:

              AArrgguummeenntt 11 AArrgguummeenntt 22 CCaalllleedd bbyy

              _-_1         _s_i_z_e       mmaalllloocc, etc.
              _p_t_r        _s_i_z_e       rreeaalllloocc, etc.
              _p_t_r        _-_1         ffrreeee, etc.
              _p_t_r        _-_2         ssttrrdduupp, etc.

       ____mmpp__eeppiilloogguuee
              Installs  an  epilogue  function to be called after
              any memory allocation, reallocation or deallocation
              function.   This  function will return a pointer to
              the previously installed epilogue function, or  the
              null  pointer if no epilogue function had been pre-
              viously installed.  The following arguments will be
              used to call the epilogue function:

              AArrgguummeenntt CCaalllleedd bbyy

              _p_t_r      mmaalllloocc, rreeaalllloocc, ssttrrdduupp, etc.
              _-_1       ffrreeee, etc.

       ____mmpp__nnoommeemmoorryy
              Installs a low-memory handler and returns a pointer
              to the previously installed handler,  or  the  null
              pointer   if   no   handler   had  been  previously
              installed.  This will be called once  by  C  memory
              allocation  functions, and repeatedly by C++ memory
              allocation  functions,  when  they  would  normally
              return NNUULLLL.  Note that this function is equivalent
              to sseett__nneeww__hhaannddlleerr and  will  replace  the  handler
              installed by that function.

LLIINNKKIINNGG
       In order to use the mpatrol library on UNIX platforms, the
       following libraries must be linked  in  before  any  other
       library  that  defines dynamic memory allocation functions
       with the same names:

        LLiibbrraarryy        RReeaassoonn

        _-_l_m_p_a_t_r_o_l      To use this library.
        _-_l_e_l_f          If built with FFOORRMMAATT==FFOORRMMAATT__EELLFF3322.
        _-_l_b_f_d _-_l_i_b_e_r_t_y If built with FFOORRMMAATT==FFOORRMMAATT__BBFFDD.
        _-_l_p_t_h_r_e_a_d      If built with MMPP__TTHHRREEAADDSS__SSUUPPPPOORRTT.

       On UNIX platforms, if there were no calls to memory  allo-
       cation functions before _-_l_m_p_a_t_r_o_l appears on the link line



Release 1.1              28 January 2000                       10





MPATROL(3)               mpatrol library               MPATROL(3)


       then the mpatrol library will not be linked in.   However,
       this  can  be  overridden  by placing _-_u_m_a_l_l_o_c just before
       that point.

       You may also wish to set your core file size limit  to  be
       zero  before  running any programs linked with the mpatrol
       library as the extra memory that the library uses can make
       such  files  much larger than normal, and if you are plan-
       ning on using a symbolic debugger then you won't need  the
       core files anyway.

EENNVVIIRROONNMMEENNTT
       The  library  can read certain options at run-time from an
       environment variable called MMPPAATTRROOLL__OOPPTTIIOONNSS.   This  vari-
       able  must  contain one or more valid option keywords from
       the list below and must be no longer than 1024  characters
       in  length.  If MMPPAATTRROOLL__OOPPTTIIOONNSS is unset or empty then the
       default settings will be used.

       The  syntax  for  options  specified   within   the   MMPPAA--
       TTRROOLL__OOPPTTIIOONNSS    environment    variable   is   OOPPTTIIOONN   or
       OOPPTTIIOONN=_V_A_L_U_E, where OOPPTTIIOONN is  a  keyword  from  the  list
       below  and _V_A_L_U_E is the setting for that option.  If _V_A_L_U_E
       is numeric then it may be specified using  binary,  octal,
       decimal  or  hexadecimal  notation,  with  binary notation
       beginning with either _0_b or _0_B.  If _V_A_L_U_E is  a  character
       string  containing spaces then it may be quoted using dou-
       ble quotes.  No whitespace may appear between the _=  sign,
       but  whitespace  must  appear  between  different options.
       Note that option keywords can be  given  in  lowercase  as
       well as uppercase, or a mixture of both.

       AALLLLOOCCBBYYTTEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies  an 8-bit byte pattern with which to pre-
              fill newly-allocated memory.  This can be  used  to
              detect  the  use  of memory which has not been ini-
              tialised after allocation.  Note that this  setting
              will  not  affect memory allocated with ccaalllloocc(()) or
              rreeccaalllloocc(()) as these functions always prefill  allo-
              cated  memory  with  an 8-bit byte pattern of zero.
              Default value: AALLLLOOCCBBYYTTEE=_0_x_F_F.

       AALLLLOOCCSSTTOOPP=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies an allocation index at which to stop  the
              program  when it is being allocated.  When the num-
              ber of memory allocations reaches this  number  the
              program  will be halted, and its state may be exam-
              ined at that point by using  a  suitable  debugger.
              Note that this setting will be ignored if its value
              is zero.  Default value: AALLLLOOCCSSTTOOPP=_0.

       CCHHEECCKK=_u_n_s_i_g_n_e_d _r_a_n_g_e
              Specifies a range of allocation indices at which to
              check  the  integrity  of  free memory and overflow



Release 1.1              28 January 2000                       11





MPATROL(3)               mpatrol library               MPATROL(3)


              buffers.  The range must be specified  as  no  more
              than two unsigned integers separated by a dash.  If
              numbers on either the left side or the  right  side
              of  the  dash are omitted then they will be assumed
              to be _0 and _i_n_f_i_n_i_t_y respectively.  A value of _0 on
              its  own  indicates that no such checking will ever
              be performed.  This option can be used to speed  up
              the  execution  speed of the library at the expense
              of checking.  Default value: CCHHEECCKK=_-.

       CCHHEECCKKAALLLL
              Equivalent to the  CCHHEECCKKAALLLLOOCCSS,  CCHHEECCKKRREEAALLLLOOCCSS  and
              CCHHEECCKKFFRREEEESS options specified together.

       CCHHEECCKKAALLLLOOCCSS
              Checks  that no attempt is made to allocate a block
              of memory of size zero.  A warning will  be  issued
              for every such case.

       CCHHEECCKKFFRREEEESS
              Checks that no attempt is made to deallocate a NNUULLLL
              pointer.  A warning will be issued for  every  such
              case.

       CCHHEECCKKRREEAALLLLOOCCSS
              Checks that no attempt is made to reallocate a NNUULLLL
              pointer or resize an existing block  of  memory  to
              size  zero.  Warnings will be issued for every such
              case.

       DDEEFFAALLIIGGNN=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the default alignment for general-purpose
              memory  allocations,  which  must be a power of two
              (and will be rounded up to the nearest power of two
              if it is not).  The default alignment for a partic-
              ular system is calculated at run-time.

       FFAAIILLFFRREEQQ=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the frequency at which all memory alloca-
              tions  will randomly fail.  For example, a value of
              _1_0 will mean that roughly 1 in  10  memory  alloca-
              tions  will fail, but a value of _0 will disable all
              random failures.  This option  can  be  useful  for
              stress-testing   an  application.   Default  value:
              FFAAIILLFFRREEQQ=_0.

       FFAAIILLSSEEEEDD=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the random number seed which will be used
              when determining which memory allocations will ran-
              domly fail.  A value of _0 will instruct the library
              to  pick  a  random seed every time it is run.  Any
              other value will mean that the random failures will
              be the same every time the program is run, but only
              as long as the seed stays the same.  Default value:



Release 1.1              28 January 2000                       12





MPATROL(3)               mpatrol library               MPATROL(3)


              FFAAIILLSSEEEEDD=_0.

       FFRREEEEBBYYTTEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies  an 8-bit byte pattern with which to pre-
              fill newly-freed  memory.   This  can  be  used  to
              detect the use of memory which has just been freed.
              It is also used internally  to  ensure  that  freed
              memory  has  not  been  overwritten.  Note that the
              freed memory may be reused the next time a block of
              memory  is  allocated  and  so once memory has been
              freed its contents are not guaranteed to remain the
              same as the specified byte pattern.  Default value:
              FFRREEEEBBYYTTEE=_0_x_5_5.

       FFRREEEESSTTOOPP=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies an allocation index at which to stop  the
              program  when  it  is being freed.  When the memory
              allocation with the specified allocation  index  is
              to  be  freed  the  program will be halted, and its
              state may be examined at that point using  a  suit-
              able  debugger.   Note  that  this  setting will be
              ignored if  its  value  is  zero.   Default  value:
              FFRREEEESSTTOOPP=_0.

       HHEELLPP   Displays  a  quick-reference  option summary to the
              ssttddeerrrr file stream.

       LLIIMMIITT=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the limit in bytes at  which  all  memory
              allocations should fail if the total allocated mem-
              ory should increase beyond this.  This can be  used
              to  stress-test  software  to see how it behaves in
              low memory conditions.  The internal memory used by
              the  library  itself will not be counted as part of
              the total heap size, but on some systems there  may
              be  a small amount of memory required to initialise
              the library itself.  Note that this setting will be
              ignored  if  its  value  is  zero.   Default value:
              LLIIMMIITT=_0.

       LLOOGGAALLLL Equivalent to the LLOOGGAALLLLOOCCSS, LLOOGGRREEAALLLLOOCCSS,  LLOOGGFFRREEEESS
              and LLOOGGMMEEMMOORRYY options specified together.

       LLOOGGAALLLLOOCCSS
              Specifies  that  all  memory  allocations are to be
              logged and sent to the log  file.   Note  that  any
              memory  allocations  made internally by the library
              will not be logged.

       LLOOGGFFIILLEE=_s_t_r_i_n_g
              Specifies an alternative file in which to place all
              diagnostics  from  the mpatrol library.  A filename
              of _s_t_d_e_r_r will send all diagnostics to  the  ssttddeerrrr
              file  stream  and  a filename of _s_t_d_o_u_t will do the



Release 1.1              28 January 2000                       13





MPATROL(3)               mpatrol library               MPATROL(3)


              equivalent with the ssttddoouutt file stream.  Note  that
              if  a  problem occurs while opening the log file or
              if any diagnostics require to be  displayed  before
              the  log  file  has  had a chance to be opened then
              they will  be  sent  to  the  ssttddeerrrr  file  stream.
              Default value: LLOOGGFFIILLEE=_m_p_a_t_r_o_l_._l_o_g

       LLOOGGFFRREEEESS
              Specifies  that  all memory deallocations are to be
              logged and sent to the log  file.   Note  that  any
              memory deallocations made internally by the library
              will not be logged.

       LLOOGGMMEEMMOORRYY
              Specifies that all  memory  operations  are  to  be
              logged  and sent to the log file.  These operations
              will be made by calls to functions such as mmeemmsseett(())
              and mmeemmccppyy(()).  Note that any memory operations made
              internally by the library will not be logged.

       LLOOGGRREEAALLLLOOCCSS
              Specifies that all memory reallocations are  to  be
              logged  and  sent  to  the log file.  Note that any
              memory reallocations made internally by the library
              will not be logged.

       NNOOFFRREEEE Specifies  that the mpatrol library should keep all
              reallocated and  freed  memory  allocations.   Such
              freed  memory  allocations  will then be flagged as
              freed and can be used by  the  library  to  provide
              better  diagnostics.   However, as no system memory
              will ever be reused by the  mpatrol  library,  this
              option  can quickly lead to a shortage of available
              system memory for a process.  Note that this option
              will always force a memory reallocation to return a
              pointer to newly-allocated memory, but the eexxppaanndd(())
              function will never be affected by this option.

       NNOOPPRROOTTEECCTT
              Specifies  that the mpatrol library's internal data
              structures should not be made read-only after every
              memory  allocation  reallocation  or  deallocation.
              This may significantly speed up execution but  this
              will  be  at the expense of less safety if the pro-
              gram accidentally overwrites some of the  library's
              internal  data  structures.   Note that this option
              has no effect on systems that do not support memory
              protection.

       OOFFLLOOWWBBYYTTEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies  an 8-bit byte pattern with which to fill
              the overflow buffers  of  all  memory  allocations.
              This  is used internally to ensure that nothing has
              been written beyond the beginning or the end  of  a



Release 1.1              28 January 2000                       14





MPATROL(3)               mpatrol library               MPATROL(3)


              block  of allocated memory.  Note that this setting
              will only have an effect if the OOFFLLOOWWSSIIZZEE option is
              in use.  Default value: OOFFLLOOWWBBYYTTEE=_0_x_A_A.

       OOFFLLOOWWSSIIZZEE=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the size in bytes to use for all overflow
              buffers, which must be a power of two (and will  be
              rounded  up  to  the  nearest power of two if it is
              not).  This is used internally to ensure that noth-
              ing  has  been  written beyond the beginning or the
              end of a block of allocated memory.  Note that this
              setting  specifies  the  size  for  only one of the
              overflow buffers given to each  memory  allocation;
              the  other  overflow  buffer will have an identical
              size.  No overflow buffers will  be  used  if  this
              setting is zero.  Default value: OOFFLLOOWWSSIIZZEE=_0.

       OOFFLLOOWWWWAATTCCHH
              Specifies that watch point areas should be used for
              overflow buffers rather than filling with the over-
              flow byte.  This can significantly reduce the speed
              of program execution.  Note that this option has no
              effect  on  systems that do not support watch point
              areas.

       PPAAGGEEAALLLLOOCC=_L_O_W_E_R|_U_P_P_E_R
              Specifies that each  individual  memory  allocation
              should  occupy  at least one page of virtual memory
              and should be placed at the lowest or highest point
              within  these  pages.   This  allows the library to
              place an overflow buffer of one page on either side
              of  every memory allocation and write-protect these
              pages as well as all free and freed  memory.   Note
              that  this  option has no effect on systems that do
              not support memory protection, and is  disabled  by
              default  on  other  systems as it can slow down the
              speed of program execution.

       PPRREESSEERRVVEE
              Specifies that  any  reallocated  or  freed  memory
              allocations  should  preserve  their  original con-
              tents.  This option must be used  with  the  NNOOFFRREEEE
              option and has no effect otherwise.

       PPRROOGGFFIILLEE=_s_t_r_i_n_g
              Specifies  an  alternative  filename  with which to
              locate the executable file containing the program's
              symbols.   On  most systems, the library will auto-
              matically be able to determine this  filename,  but
              on  a  few  systems this option may have to be used
              before any or all symbols can be read.

       RREEAALLLLOOCCSSTTOOPP=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies a reallocation index at which to stop the



Release 1.1              28 January 2000                       15





MPATROL(3)               mpatrol library               MPATROL(3)


              program  when  a memory allocation is being reallo-
              cated.  If the AALLLLOOCCSSTTOOPP option  is  non-zero  then
              the  program  will  be  halted  when the allocation
              matching that allocation index is  reallocated  the
              specified  number  of times.  Otherwise the program
              will be halted the first  time  any  allocation  is
              reallocated  the  specified  number of times.  Note
              that this setting will be ignored if its  value  is
              zero.  Default value: RREEAALLLLOOCCSSTTOOPP=_0.

       SSAAFFEESSIIGGNNAALLSS
              Instructs  the  library to save and replace certain
              signal handlers during  the  execution  of  library
              code  and to restore them afterwards.  This was the
              default behaviour in version  1.0  of  the  mpatrol
              library and was changed since some memory-intensive
              programs became very hard to  interrupt  using  the
              keyboard,  thus giving the impression that the pro-
              gram or system had hung.

       SSHHOOWWAALLLL
              Equivalent to the SSHHOOWWFFRREEEEDD,  SSHHOOWWUUNNFFRREEEEDD,  SSHHOOWWMMAAPP
              and SSHHOOWWSSYYMMBBOOLLSS options specified together.

       SSHHOOWWFFRREEEEDD
              Specifies that a summary of all of the freed memory
              allocations should be displayed at the end of  pro-
              gram  execution.   This option must be used in con-
              junction with the NNOOFFRREEEE option and this step  will
              not  be performed if an abnormal termination occurs
              or if there were no freed allocations.

       SSHHOOWWMMAAPP
              Specifies that a memory  map  of  the  entire  heap
              should  be  displayed  at the end of program execu-
              tion.  This step will not be performed if an abnor-
              mal termination occurs or if the heap is empty.

       SSHHOOWWSSYYMMBBOOLLSS
              Specifies  that  a  summary  of all of the function
              symbols read from  the  program's  executable  file
              should  be  displayed  at the end of program execu-
              tion.  This step will not be performed if an abnor-
              mal  termination  occurs  or if no symbols could be
              read from the executable file.

       SSHHOOWWUUNNFFRREEEEDD
              Specifies that a summary of all of the unfreed mem-
              ory  allocations  should be displayed at the end of
              program execution.  This step will not be performed
              if  an  abnormal termination occurs or if there are
              no unfreed allocations.





Release 1.1              28 January 2000                       16





MPATROL(3)               mpatrol library               MPATROL(3)


       UUNNFFRREEEEDDAABBOORRTT=_u_n_s_i_g_n_e_d _i_n_t_e_g_e_r
              Specifies the minimum number of unfreed allocations
              at  which  to abort the program just before program
              termination.  A summary of all the allocations will
              be  displayed  on  the  standard  error file stream
              before aborting.  This option may be handy for  use
              in  batch  tests  as  it can force tests to fail if
              they do not free up  a  minimum  number  of  memory
              allocations.    Note  that  this  setting  will  be
              ignored if  its  value  is  zero.   Default  value:
              UUNNFFRREEEEDDAABBOORRTT=_0.

       UUSSEEMMMMAAPP
              Specifies   that  the  library  should  use  mmmmaapp(())
              instead of ssbbrrkk(()) to allocate system memory on UNIX
              platforms.  This option should be used if there are
              problems when using the mpatrol library in combina-
              tion  with another malloc library which uses ssbbrrkk(())
              to allocate its memory.  It is ignored  on  systems
              that do not support the mmmmaapp(()) system call.

SSEEEE AALLSSOO
       mmppaattrrooll(1), eellff(3e), bbffdd(3).

       The mpatrol manual and FAQ.

AAUUTTHHOORR
       Graeme S. Roy <graeme@epc.co.uk>

CCOOPPYYRRIIGGHHTT
       Copyright (C) 1997-2000 Graeme S. Roy <graeme@epc.co.uk>

       This  library  is  free  software; you can redistribute it
       and/or modify it under the terms of the GNU  Library  Gen-
       eral  Public  License  as  published  by the Free Software
       Foundation; either version 2 of the License, or  (at  your
       option) any later version.

       This  library  is  distributed in the hope that it will be
       useful, but WITHOUT ANY WARRANTY; without even the implied
       warranty  of  MERCHANTABILITY  or FITNESS FOR A PARTICULAR
       PURPOSE.  See the GNU Library General Public  License  for
       more details.

       You should have received a copy of the GNU Library General
       Public License along with this library; if not,  write  to
       the Free Software Foundation, Inc., 59 Temple Place, Suite
       330, Boston, MA 02111-1307, USA.









Release 1.1              28 January 2000                       17


