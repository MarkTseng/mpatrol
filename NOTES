NOTES FOR THE MPATROL LIBRARY


This document contains guidelines on how to add support for new operating
systems, processor architectures and object file formats to the library source
code, as well as containing a list of performance figures.


Adding support for a new operating system

  * Add a new TARGET and/or SYSTEM definition in target.h.  The TARGET macro is
    for fundamentally different operating systems, whereas the SYSTEM macro is
    for differentiating variations of a particular operating system.

  * Make any necessary modifications to config.h.

  * Add any support for memory allocation in memory.c.

  * Add any support for stack traversal in stack.c.

  * Add any support for signals in signals.c.

  * Add any support for threads in mutex.c.

  * Add a new version and date format (or use an existing one) in version.c.

  * Decide if the malloc() replacements should be used from mpatrol.c.

  * Add a new subdirectory in the build directory that contains a Makefile
    and any other files that are required to build the library on the new
    operating system.


Adding support for a new processor architecture

  * Add a new ARCH definition in target.h.

  * Make any necessary modifications to config.h.

  * Add any support for memory allocation in memory.c.

  * Add any support for stack traversal in stack.c.


Adding support for a new object file format

  * Add a new FORMAT definition in target.h.

  * Make any necessary modifications to config.h.

  * Add any support for stack traversal in stack.c.

  * Add any support for symbol reading in symbol.c.


Library performance

    The following times were obtained on a Sun Ultra 5 with an UltraSPARC IIi
    processor running at 333MHz and running Solaris 7.  The test performed was
    the one in tests/pass/test1.c and all tests were run on a lightly loaded
    system, but were run several times to obtain an average result.  Obviously,
    these times can only be an approximation, but should serve to illustrate the
    effects on performance that each option can have.  All times are given in
    seconds, and the second time on each line was obtained with the same
    options plus the NOPROTECT option.  Running with the CHECK=0 option would
    speed things up dramatically, albeit at the expense of less error checking.

      * [no options]
            0.748   0.396
      * OFLOWSIZE=2
            0.795   0.423
      * OFLOWSIZE=8
            0.824   0.454
      * PAGEALLOC=LOWER
           20.179  19.860
      * PAGEALLOC=UPPER
           20.296  19.946

      * NOFREE
            1.346   0.915
      * NOFREE OFLOWSIZE=2
            1.411   0.991
      * NOFREE OFLOWSIZE=8
            1.482   1.042
      * NOFREE PAGEALLOC=LOWER
           20.467  20.130
      * NOFREE PAGEALLOC=UPPER
           20.570  20.227

      * NOFREE PRESERVE
            0.732   0.330
      * NOFREE PRESERVE OFLOWSIZE=2
            0.820   0.389
      * NOFREE PRESERVE OFLOWSIZE=8
            0.876   0.460
      * NOFREE PRESERVE PAGEALLOC=LOWER
           20.539  20.156
      * NOFREE PRESERVE PAGEALLOC=UPPER
           20.641  20.243

      * OFLOWSIZE=2 OFLOWWATCH
            Interrupted after half an hour as it still hadn't finished.

      * [Solaris 7 malloc(3c) library]
            0.033
      * [Solaris 7 malloc(3x) library]
            0.036
      * [Solaris 7 bsdmalloc(3x) library]
            0.028
      * [Solaris 7 mapmalloc(3x) library]
            0.033
      * [Solaris 7 watchmalloc(3x) library]
           40.845
